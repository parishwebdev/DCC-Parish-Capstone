@model DCC_Parish_Capstone.Models.ViewModels.ArticleUserCommentViewModel
@using Microsoft.AspNet.Identity
@{
    ViewBag.Title = "Details";
}

<link href="~/Content/HighlightCss/dark.css" rel="stylesheet" />
<script src="~/Scripts/highlight.pack.js"></script>

@helper DisplayHtml()
{
    <div class="row">
        <h2 class="mt-2 col-md-10">
            <span>
                @Html.DisplayFor(model => model.Article.Title)
            </span>
        </h2>
        @if (Model.Article.ArticleAuthor.Id == User.Identity.GetUserId())
        {

            <div class="col-md-2">
                <a href="@Url.Action("Edit", "Articles", new { id = Model.Article.Id })" class="btn btn-outline-primary btn-sm mt-3">Edit Article <i class="fas fa-edit"></i></a>
            </div>
        }
    </div>
    <div>
        <hr />

        <div class="row">
            <div class="col-md-8 ">
                <span class="text-muted text-size-95">
                    @Html.DisplayNameFor(model => model.Article.DateCreated): @Html.DisplayFor(model => model.Article.DateCreated) |
                    Author: <a tabindex="0"
                       class=""
                       role="button"
                       data-html="true"
                       data-toggle="popover"
                       data-trigger="focus"
                       title="<b>UserName</b> - @Html.DisplayFor(model => model.Article.ArticleAuthor.Nickname)"
                       data-content="<div><b>Rank</b> - @Html.DisplayFor(model => model.Article.ArticleAuthor.Rank.Name)</div>  <div><b>Points</b> - @Html.DisplayFor(model => model.Article.ArticleAuthor.Points)</div> <div> <b>Badges Earned</b> - @Model.Article.ArticleAuthor.EarnedBagdges.Count()  </div>">@Html.DisplayFor(model => model.Article.ArticleAuthor.Nickname)</a>
                </span>
            </div>

        </div>

        <div class="row my-3">
            <div class="col-md-4">
                <h5>@Html.DisplayNameFor(model => model.Article.BestPractice.Name)</h5>

                @Html.DisplayFor(model => model.Article.BestPractice.Name)
            </div>
            <div class="col-md-4">
                <h5> @Html.DisplayNameFor(model => model.Article.Language.Name)</h5>

                @Html.DisplayFor(model => model.Article.Language.Name)
            </div>
        </div>
        <dl class="dl-horizontal ">

            <dt class="mt-3">
                @Html.DisplayNameFor(model => model.Article.Body)
            </dt>

            <dd class="mb-3">
                @Html.DisplayFor(model => model.Article.Body)
            </dd>

            <dt class="mt-3">
                @Html.DisplayNameFor(model => model.Article.FeaturedCode)
            </dt>

            <dd class="mb-3">
                <pre><code class="@Html.DisplayNameFor(model => model.Article.Language.Name)">@Html.DisplayFor(model => model.Article.FeaturedCode) </code></pre>
            </dd>

        </dl>

        <div class="row mt-2 mb-4">
            <div class="col-md-12">
                <h6>Vote(s)</h6>
            </div>

            <div class="col-md-3">
                <a href="@Url.Action("UpvoteArticle", new { articleid = Model.Article.Id })" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-alt-circle-up"></i>
                    <span class="badge badge-primary"> @Html.DisplayFor(model => model.Article.UpVotes) </span>
                </a>

                <a href="@Url.Action("DownvoteArticle", new { articleid = Model.Article.Id })" class="btn btn-outline-primary">
                    <i class="fas fa-arrow-alt-circle-down"></i>
                    <span class="badge badge-primary"> @Html.DisplayFor(model => model.Article.DownVotes)</span>
                </a>
            </div>
        </div>


    </div>

}
@DisplayHtml()
@{ string contentHtml = DisplayHtml().ToHtmlString(); }

<hr />
<div class="row">
    <h4 class="col-md-12"><i class="far fa-share-square"></i> Sharing</h4>

    <div class="col-md-4">


        <h6 class="mt-4 text-bold">Email:</h6>
        @using (Html.BeginForm("SendEmail", "Articles", FormMethod.Post, new { @class = "form-inline" }))
        {

            <input type="text" name="to" id="to" placeholder="Email" />
            @Html.Hidden("html", contentHtml, null)
            @Html.Hidden("articleId", Model.Article.Id, null)
            @Html.Hidden("articleTitle", Model.Article.Title, null)
            <button class="btn btn-primary" type="submit">Email</button>

        }
    </div>
    <div class="col-md-4">
        <h6 class="mt-4 text-bold">Download:</h6>
        @using (Html.BeginForm("SubmitAction", "Articles", FormMethod.Post, new { @class = "form-inline" }))
        {

            @Html.Hidden("html", contentHtml, null)
            @Html.Hidden("articleName", Model.Article.Title)
            @Html.Hidden("thisUrl", Request.Url.AbsoluteUri)
            <input class="btn btn-primary" type="submit" value="Download PDF">

        }
    </div>
</div>

<hr />

<!-- Comments -->

@using (Html.BeginForm("Create", "Comments", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Comment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            <div class="col-md-10">
                @Html.EditorFor(model => model.Comment.Body, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment.Body, "", new { @class = "text-danger" })
            </div>
        </div>

        @Html.Hidden("ArticleId", Model.Article.Id)
        @Html.Hidden("ParentId", 0)

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Comment" class="btn btn-outline-primary" />
            </div>
        </div>
    </div>
}


<ul class="list-group">



    @foreach (var item in Model.Comments.Where(c => c.ParentId == 0))
    {
        <li class="list-group-item row" style="display: inherit !important;">
            <div class="col-md-3">
                <h5>@Html.DisplayNameFor(model => model.Comment.CommentAuthor.Nickname)</h5>
                <p>
                
                    <a tabindex="0"
                       id="comPop-@Html.DisplayFor(modelItem => item.Id)"
                       class=""
                       role="button"
                       data-html="true"
                       data-toggle="popover"
                       data-trigger="focus"
                       title="<span><b>UserName</b> - @Html.DisplayFor(modelItem => item.CommentAuthor.Nickname)</span>"
                       data-content="<div><b>Rank</b> - @Html.DisplayFor(modelItem => item.CommentAuthor.Rank.Name)</div>  <div><b>Points</b> - @Html.DisplayFor(modelItem => item.CommentAuthor.Points)</div>  <div> <b>Badges Earned</b> - @item.CommentAuthor.EarnedBagdges.Count()  </div>">@Html.DisplayFor(modelItem => item.CommentAuthor.Nickname)</a>
               </p>
            </div>

            <div class="col-md-5">
                <h5> @Html.DisplayNameFor(model => model.Comment.Body)</h5>
                <p> @Html.DisplayFor(modelItem => item.Body)</p>
            </div>

            <div class="col-md-3">
                <h5> @Html.DisplayNameFor(model => model.Comment.DateCreated)</h5>
                <p> @Html.DisplayFor(modelItem => item.DateCreated) </p>
            </div>
            <div class="col-md-1">
                @if (item.CommentAuthor.Id == User.Identity.GetUserId())
                {
                    <a href="@Url.Action("DeleteConfirmed", "Comments", new { id = item.Id,  articleid =  Model.Article.Id})" class="btn btn-outline-primary btn-sm"> <i class="fas fa-trash-alt"></i></a>
                }
            </div>

            <button class="btn btn-primary mx-2" type="button" data-toggle="collapse" data-target="#submitReply-@Html.DisplayFor(modelItem => item.Id)" aria-expanded="false" aria-controls="submitReply-@Html.DisplayFor(modelItem => item.Id)">
                Reply
            </button>

            <button class="btn btn-primary mx-2" type="button" data-toggle="collapse" data-target="#viewReplys-@Html.DisplayFor(modelItem => item.Id)" aria-expanded="false" aria-controls="viewReplys-@Html.DisplayFor(modelItem => item.Id)">
                View Replies  <span class="badge badge-light"> @Model.Comments.Where(c => c.ParentId == item.Id).Count() </span>
            </button>


            <div class="collapse col-md-12 mt-2" id="submitReply-@Html.DisplayFor(modelItem => item.Id)">
                <div class="card card-body">
                    <div class="form-horizontal col-md-12">
                        @using (Html.BeginForm("Create", "Comments", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()


                            <h4>Reply</h4>
                            <hr />
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="form-group">
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Comment.Body, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Comment.Body, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            @Html.Hidden("ArticleId", Model.Article.Id)

                            @Html.Hidden("ParentId", item.Id)

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Reply" class="btn btn-outline-primary" />
                                </div>
                            </div>

                        }
                    </div>
                </div>
            </div>

            <div class="collapse col-md-12 mt-2" id="viewReplys-@Html.DisplayFor(modelItem => item.Id)">
                <div class="card card-body">

                    <ul class="list-group col-md-11 mx-auto">
                        @foreach (var subitem in Model.Comments.Where(c => c.ParentId == item.Id))
                        {
                            <li class="list-group-item row" style="display: inherit !important;">
                                <div class="col-md-3">
                                    <h5>@Html.DisplayNameFor(model => model.Comment.CommentAuthor.Nickname)</h5>
                                    <p>                                
                                     <a tabindex="0"
                                       id="comRepPop-@Html.DisplayNameFor(modelItem => subitem.Id)"
                                       class=""
                                       role="button"
                                       data-html="true"
                                       data-toggle="popover"
                                       data-trigger="focus"
                                       title="<span><b>UserName</b> - @Html.DisplayFor(modelItem => subitem.CommentAuthor.Nickname)</span>"
                                       data-content="<div><b>Rank</b> - @Html.DisplayFor(modelItem => subitem.CommentAuthor.Rank.Name)</div>  <div><b>Points</b> - @Html.DisplayFor(modelItem => subitem.CommentAuthor.Points)</div>  <div> <b>Badges Earned</b> - @subitem.CommentAuthor.EarnedBagdges.Count()  </div>">@Html.DisplayFor(modelItem => subitem.CommentAuthor.Nickname)
                                    </a>
                                    
                                    
                                    </p>
                                </div>

                                <div class="col-md-5">
                                    <h5> @Html.DisplayNameFor(model => model.Comment.Body)</h5>
                                    <p> @Html.DisplayFor(modelItem => subitem.Body)</p>
                                </div>

                                <div class="col-md-3">
                                    <h5> @Html.DisplayNameFor(model => model.Comment.DateCreated)</h5>
                                    <p> @Html.DisplayFor(modelItem => subitem.DateCreated) </p>
                                </div>
                                <div class="col-md-1">
                                    @if (subitem.CommentAuthor.Id == User.Identity.GetUserId())
                                    {
                                        <a href="@Url.Action("DeleteConfirmed", "Comments", new { id = subitem.Id,  articleid =  Model.Article.Id})" class="btn btn-outline-primary btn-sm"> <i class="fas fa-trash-alt"></i></a>
                                    }
                                </div>
                            </li>
                        }
                    </ul>


                </div>
            </div>





        </li>
    }


</ul>
<hr />
<!-- /Comments -->
<p><a class="btn btn-outline-primary btn-sm" href="@Url.Action("index")"><i class="fas fa-caret-square-left"></i> Full Article List</a></p>


@section scripts {
    <script src="~/Scripts/HighlightFunctions.js"></script>

    <script>
        $(function () {
            // Enables popover
            $("[data-toggle=popover]").popover();
        });
    </script>
}
